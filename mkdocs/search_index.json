{
    "docs": [
        {
            "location": "/",
            "text": "GELUTILS\n\n\nTools and utilities for working with scientific GEL files.\nMakes it easy to convert and annotate .GEL or .TIFF image files from e.g. Typhoon scanners and GelDocs.\n\n\nThe primary use of this application/package is to add lane annotations to gel images.\nThe application can be installed and used as any other application,\ne.g. by simply double-clicking a .GEL file and then selecting the annotate-gel application to annotate the gel.\nIt features a simple GUI where you can add the text you want to display above each lane and\nconfigure how the final gel image appears.\nGels can be scaled, cropped, rotated, etc.\nThe application will export a SVG file with the cropped/rotated gel image, overlayed by the given annotations.\nThe SVG file can be automatically converted to a PNG, which is sometimes more convenient for presentation usage.\n\n\nFAQ: What are GEL images and who cares?\n\n\nGels are widely used in molecular biology and biotechnology for analyzing the size of biological molecules, e.g. DNA or\nproteins.\nWhen analysing samples on gels via gelelectrophoresis, samples are loaded at the top of the gel in well/indentations at\nthe top of the gel. Charged molecules are then dragged through the gel by applying an electric field across the gel.\nLarger molecules have more interaction with the gel matrix. This drag reduces the migration rate through the gel.\nSmaller molecules travels faster through the gel.\nThis creates a pattern of bands on the gel.\nBands from the a sample in one well will form a vertical \nlane\n as they travel through the gel.\n\n\nFeatures and basic usage:\n\n\nCurrent features:\n\n Quickly annotate lanes on gel using sample names from a plain text file.\n\n Linearize GEL files stored in MD GEL squareroot format (e.g. gel files from Typhoon scanners).\n* A simple GUI to control the program.\n\n\nBasic usage:\n\n Open your gel image with the included AnnotateGel App.\n\n Type lane annotations in the text box to the left,\n\n Configure image processing by altering the YAML-formatted dict in the text box to the right.\n\n Click \nAnnotate Gel\n to create an SVG file with your gel image and the annotations overlayed at the top of the gel.\n\n\nBugs, feature suggestions and pull requests:\n\n\nIf you find any bugs, please let me know \n they are usually very easy and fast to fix.\n\n\nAlso feel free to write me with feature suggestions.\nOr, even better: Fork this repository, fix the bugs and\nimplement the features as you want, then send me a pull request :)\n\n\nTips and Tricks:\n\n\nView/Open images after annotation:\n\n\n\n\nIf you set \nopen_webbrowser=true\n in the AnnotateGel app, it will use the webbrowser module to view the annotated SVG images.\n\n\nThis works really well if e.g. Google Chrome is your default app for viewing SVG files.\n\n\nIf, however, you have Adobe Illustrator (or similar) installed, this might be the default App for SVG files.\n\n\nThis is not always optimal, since you will automatically see the latest version of the SVG file.\n\n\nTo change the default app for viewing SVG files:\n\n\nOSX: Right-click an SVG file, select \nGet Info\n in the context menu, then under \nOpen with\n select the proper app, then \nmake sure you click the \nChange All\n button to make the change apply for all SVG files (otherwise it will only apply to that one file).\n\n\nWindows: Shift + right-click an SVG file, select \nOpen with\n, then \nSelect file / other\n, then select the proper app. This will generally apply to all files of the same filetype.\n\n\n\n\n\n\n\n\nMaking AnnotateGel the default app for GEL and GAML files:\n\n\nUsing AnnotateGel as the default app for opening GEL or GAML files is fairly easy on Windows. However, on OS X, it requires a little bit of work.\n* Before you proceed, determine where AnnotateGel was installed when you did \npip install\n as the final installation step above. See the section below to determine where AnnotateGel is located.\n\n\nOn Windows, to use AnnotateGel as default application:\n* Shift + right-click a .gel file, select \nOpen with\n, then \nBrowse\n, then locate AnnotateGel and select OK.\n\n\nOn OS X, using AnnotateGel as a default app is a little more involved. I suggest taking a look at these references:\n\nmborgerson\n, \nstackexchange\n.\nBut in short, the process looks like this:\n\n Open Automator (cmd+space, then type Automator).\n\n Create a new \nApplication\n document.\n\n Add a \nshell script\n action to your workflow.\n\n Under \nShell:\n select \n/bin/bash\n, and under \nPass input:\n select \nas arguments\n.\n\n In the text box type: \n/path/to/bin/AnnotateGel \"$@\"\n (where \n/path/to/bin/AnnotateGel\n is the file location where AnnotateGel was installed, see below).\n\n Save this workflow as \nAnnotateGel.app\n (Menu \nFile -\n Save\n or Cmd+s). You can save it in whatever location you want, e.g. under \nApplications\n, where you have your other applications.\n\n Now right-click a .gel file, select \nGet Info\n, then under \nOpen with\n select \nOther\n, then browse to select the \nAnnotateGel.app\n workflow/file you just saved with Automator. Check \nAlways Open With\n, and press \nAdd\n.\n\n Still in the \nGet Info\n window, press the \nChange All\n button to use AnnotateGel.app to open all files.\n* If you want to use AnnotateGel.app to also open .gaml files (gel annotation config files), simply right-click a .gaml file and repeat the previous two steps.\n\n\nWhere is AnnotateGel and other gelutils apps installed?\n\n\nThe location where \npip install\n installs the AnnotateGel executable files (aka binaries/scripts/apps) depends on (1) your platform, (2) your python distribution, and (3) whether you are using a python environment.\n\n\nThe easiest way to find AnnotateGel is to just search for it:\n\n OS X: Open Spotlight (Cmd + space), then type \nAnnotateGel\n.\n\n Windows: Use Windows Search/Explorer (WindowsKey + F) or your preferred file-finder to find the AnnotateGel file. Note that Windows search sometimes doesn\nt find new files right away, and may need considerable time to \nre-index\n the file before it can be found. Blame Microsoft.\n* Linux: Open terminal and type: \nfind -name AnnotateGel ~/\n. If it doesn\nt find anything in your home folder, try \nfind -name AnnotateGel /\n.\n\n\nLets go though some examples of where AnnotateGel is typically found after installation:\n\n Example 1: On OS X (platform) using Anaconda python distribution and installing in a python environment called \ngelutils\n, the path to the installed AnnotateGel executable is \n/Users/rasmus/anaconda3/envs/gelutils/bin/AnnotateGel\n.\n\n Example 2: On OS X (platform) using Anaconda python distribution and not using environments (aka \nthe default environment\n), the path to the installed AnnotateGel executable is \n/Users/rasmus/anaconda3/bin/AnnotateGel\n.\n* Example 3: On OS X (platform) using the official python distribution from \npython.org\n and not using environments (aka \nthe default environment\n), the path to the installed AnnotateGel executable is \n/Library/Frameworks/Python.framework/Versions/3.4/bin/AnnotateGel\n.\n\n\nTODO:\n\n\nBetter icons:\n\n A better App icon.\n\n An icon for yaml/gaml files.\n* An icon for gel files.\n\n\nDocumentation:\n\n\nPlease refer to the files in the \ndoc/\n directory for help and documentation.\nAnd, of course, the source if you are so inclined.",
            "title": "Introduction"
        },
        {
            "location": "/#gelutils",
            "text": "Tools and utilities for working with scientific GEL files.\nMakes it easy to convert and annotate .GEL or .TIFF image files from e.g. Typhoon scanners and GelDocs.  The primary use of this application/package is to add lane annotations to gel images.\nThe application can be installed and used as any other application,\ne.g. by simply double-clicking a .GEL file and then selecting the annotate-gel application to annotate the gel.\nIt features a simple GUI where you can add the text you want to display above each lane and\nconfigure how the final gel image appears.\nGels can be scaled, cropped, rotated, etc.\nThe application will export a SVG file with the cropped/rotated gel image, overlayed by the given annotations.\nThe SVG file can be automatically converted to a PNG, which is sometimes more convenient for presentation usage.",
            "title": "GELUTILS"
        },
        {
            "location": "/#faq-what-are-gel-images-and-who-cares",
            "text": "Gels are widely used in molecular biology and biotechnology for analyzing the size of biological molecules, e.g. DNA or\nproteins.\nWhen analysing samples on gels via gelelectrophoresis, samples are loaded at the top of the gel in well/indentations at\nthe top of the gel. Charged molecules are then dragged through the gel by applying an electric field across the gel.\nLarger molecules have more interaction with the gel matrix. This drag reduces the migration rate through the gel.\nSmaller molecules travels faster through the gel.\nThis creates a pattern of bands on the gel.\nBands from the a sample in one well will form a vertical  lane  as they travel through the gel.",
            "title": "FAQ: What are GEL images and who cares?"
        },
        {
            "location": "/#features-and-basic-usage",
            "text": "Current features:  Quickly annotate lanes on gel using sample names from a plain text file.  Linearize GEL files stored in MD GEL squareroot format (e.g. gel files from Typhoon scanners).\n* A simple GUI to control the program.  Basic usage:  Open your gel image with the included AnnotateGel App.  Type lane annotations in the text box to the left,  Configure image processing by altering the YAML-formatted dict in the text box to the right.  Click  Annotate Gel  to create an SVG file with your gel image and the annotations overlayed at the top of the gel.",
            "title": "Features and basic usage:"
        },
        {
            "location": "/#bugs-feature-suggestions-and-pull-requests",
            "text": "If you find any bugs, please let me know   they are usually very easy and fast to fix.  Also feel free to write me with feature suggestions.\nOr, even better: Fork this repository, fix the bugs and\nimplement the features as you want, then send me a pull request :)",
            "title": "Bugs, feature suggestions and pull requests:"
        },
        {
            "location": "/#tips-and-tricks",
            "text": "",
            "title": "Tips and Tricks:"
        },
        {
            "location": "/#viewopen-images-after-annotation",
            "text": "If you set  open_webbrowser=true  in the AnnotateGel app, it will use the webbrowser module to view the annotated SVG images.  This works really well if e.g. Google Chrome is your default app for viewing SVG files.  If, however, you have Adobe Illustrator (or similar) installed, this might be the default App for SVG files.  This is not always optimal, since you will automatically see the latest version of the SVG file.  To change the default app for viewing SVG files:  OSX: Right-click an SVG file, select  Get Info  in the context menu, then under  Open with  select the proper app, then  make sure you click the  Change All  button to make the change apply for all SVG files (otherwise it will only apply to that one file).  Windows: Shift + right-click an SVG file, select  Open with , then  Select file / other , then select the proper app. This will generally apply to all files of the same filetype.",
            "title": "View/Open images after annotation:"
        },
        {
            "location": "/#making-annotategel-the-default-app-for-gel-and-gaml-files",
            "text": "Using AnnotateGel as the default app for opening GEL or GAML files is fairly easy on Windows. However, on OS X, it requires a little bit of work.\n* Before you proceed, determine where AnnotateGel was installed when you did  pip install  as the final installation step above. See the section below to determine where AnnotateGel is located.  On Windows, to use AnnotateGel as default application:\n* Shift + right-click a .gel file, select  Open with , then  Browse , then locate AnnotateGel and select OK.  On OS X, using AnnotateGel as a default app is a little more involved. I suggest taking a look at these references: mborgerson ,  stackexchange .\nBut in short, the process looks like this:  Open Automator (cmd+space, then type Automator).  Create a new  Application  document.  Add a  shell script  action to your workflow.  Under  Shell:  select  /bin/bash , and under  Pass input:  select  as arguments .  In the text box type:  /path/to/bin/AnnotateGel \"$@\"  (where  /path/to/bin/AnnotateGel  is the file location where AnnotateGel was installed, see below).  Save this workflow as  AnnotateGel.app  (Menu  File -  Save  or Cmd+s). You can save it in whatever location you want, e.g. under  Applications , where you have your other applications.  Now right-click a .gel file, select  Get Info , then under  Open with  select  Other , then browse to select the  AnnotateGel.app  workflow/file you just saved with Automator. Check  Always Open With , and press  Add .  Still in the  Get Info  window, press the  Change All  button to use AnnotateGel.app to open all files.\n* If you want to use AnnotateGel.app to also open .gaml files (gel annotation config files), simply right-click a .gaml file and repeat the previous two steps.",
            "title": "Making AnnotateGel the default app for GEL and GAML files:"
        },
        {
            "location": "/#where-is-annotategel-and-other-gelutils-apps-installed",
            "text": "The location where  pip install  installs the AnnotateGel executable files (aka binaries/scripts/apps) depends on (1) your platform, (2) your python distribution, and (3) whether you are using a python environment.  The easiest way to find AnnotateGel is to just search for it:  OS X: Open Spotlight (Cmd + space), then type  AnnotateGel .  Windows: Use Windows Search/Explorer (WindowsKey + F) or your preferred file-finder to find the AnnotateGel file. Note that Windows search sometimes doesn t find new files right away, and may need considerable time to  re-index  the file before it can be found. Blame Microsoft.\n* Linux: Open terminal and type:  find -name AnnotateGel ~/ . If it doesn t find anything in your home folder, try  find -name AnnotateGel / .  Lets go though some examples of where AnnotateGel is typically found after installation:  Example 1: On OS X (platform) using Anaconda python distribution and installing in a python environment called  gelutils , the path to the installed AnnotateGel executable is  /Users/rasmus/anaconda3/envs/gelutils/bin/AnnotateGel .  Example 2: On OS X (platform) using Anaconda python distribution and not using environments (aka  the default environment ), the path to the installed AnnotateGel executable is  /Users/rasmus/anaconda3/bin/AnnotateGel .\n* Example 3: On OS X (platform) using the official python distribution from  python.org  and not using environments (aka  the default environment ), the path to the installed AnnotateGel executable is  /Library/Frameworks/Python.framework/Versions/3.4/bin/AnnotateGel .",
            "title": "Where is AnnotateGel and other gelutils apps installed?"
        },
        {
            "location": "/#todo",
            "text": "Better icons:  A better App icon.  An icon for yaml/gaml files.\n* An icon for gel files.",
            "title": "TODO:"
        },
        {
            "location": "/#documentation",
            "text": "Please refer to the files in the  doc/  directory for help and documentation.\nAnd, of course, the source if you are so inclined.",
            "title": "Documentation:"
        },
        {
            "location": "/Installation/",
            "text": "Gelutils - Installation:\n\n\nCommand-line installation using pip:\n\n\n\n\nThis may be the easiest way to get and install gelutils.\n\n\nFirst, if you are using environments, create a new environment for gelutils \n or activate an existing environment you want to install gelutils into.\n\n\nIf using Anaconda, create a conda environment that includes \nnumpy, pyyaml, six, pillow=2.7, cffi\n.\n\n\nExample: \nconda create -n gelutils six numpy pillow=2.7 pyyaml cffi\n\n\n\n\n\n\nThen install gelutils using \npip install gelutils\n.\n\n\n\n\nInstall gelutils in editable mode:\n\n\n\n\nActivate/create environment for gelutils.\n\n\nGo to the folder where you want to place the gelutils package source.\n\n\nInstall gelutils using \npip install -e git+\nhttps://github.com/scholer/gelutils\n\n\n\n\nManual installation from source:\n\n\n\n\nDownload / git clone, go to the root directory. If you type \nls\n (or \ndir\n on Windows) you should see \nREADME.md\n and REQUIREMENTS.txt files.\n\n\nIf you are using Python environments, activate the environment you want to use for gelutils.\n\n\nTo create new conda environment for gelutils, type: \nconda create -n gelutils --file REQUIREMENTS.txt\n\n\nIf the packages are not all available from Anaconda, type:\n\nconda create -n gelutils six numpy pillow=2.7 pyyaml cffi\n,\nand use pip to install the rest.\n\n\n\n\n\n\nMake sure you have all required dependencies, e.g. using \npip install -r REQUIREMENTS.txt\n.\n\n\nInstall using \npip install -e .\n (the period at the end means \nthe current directory\n).\n\n\n\n\nUpgrading Gelutils:\n\n\nTo update gelutils to the newest version, activate the python environment where you installed gelutils (if any),\nthen run: \n\n\npip install -U gelutils\n\n\n\n\nPython Installation:\n\n\nIn general, I recommend using either Anaconda or a package manager to install Python and pip.\nAnaconda is available from \nhere\n.\nIf you are already using a package manager (e.g. \nchocolatey\n on Windows),\nyou may want to use your package manager to install Python.\n\n\nInside your Python distribution you may want to have separate Python \nenvironments\n.\n\nWhy do you need \nenvironments\n?\n\n *  A: Some Python applications may require a very specific set of dependencies, which can sometimes be incompatible.\n    For example, Gelutils requires a specific version of Pillow, an image processing library.\n    Using the current version of Pillow, or a very old version, will give an error.\n    However, what if you have another Python package or application which requires the newest version of Pillow?\n    How do you make these work together, using the same Python installation?\n    The answer is to have separate Python environments, one for each application.\n\n\nEnvironments can be created and managed in a couple of different ways:\n * If you are using the Anaconda Python distribution, use \nconda\n command line tool\n   to create environments and install packages (using \npip\n when a conda package is not yet available).\n\n\nInstallation - Troubleshooting:\n\n\nGenerally, one cause of troubles during installation is the Cairo dependencies.\nCairo is used to convert SVG files to PNG, but is not strictly needed if you only need the SVG files.\nIt is also possible to use other methods to convert SVG files to PNG, e.g. ImageMagick, Illustrator, Preview, etc.\nIf you find that you cannot resolve Cairo-related issues during installation, you can install Gelutils without it using\n\npip install --no-deps gelutils svgwrite pyyaml six Pillow==2.7 numpy\n, then\n\n\nThe cairocffi dependency uses the C Foreign Function Interface (c ffi) to interact with Cairo C code.\nIn order to compile cairocffi, you must have \nlibffi-dev\n installed.\n* On Linux: \nsudo apt-get install libffi-dev\n (sometimes called \nlibffi-devel\n)\n\n\nIf you get a \ncompiler\n error, make sure you have a compiler installed.\n\n On Linux/Ubuntu, install with \nsudo apt-get install gcc\n.\n\n On OS X, simply typing gcc should allow you to install the Mac developer tools.\n* On Windows, hopefully pip can find a binary wheel for you because building on Windows is still a PITA.\n    * The \ncffi\n library is generally available as a binary wheel for Anaconda.\n    If \ncffi\n install is your problem and you are using Anaconda, try installing \ncffi\n using: \nconda install cffi\n.",
            "title": "Installation"
        },
        {
            "location": "/Installation/#gelutils-installation",
            "text": "",
            "title": "Gelutils - Installation:"
        },
        {
            "location": "/Installation/#command-line-installation-using-pip",
            "text": "This may be the easiest way to get and install gelutils.  First, if you are using environments, create a new environment for gelutils   or activate an existing environment you want to install gelutils into.  If using Anaconda, create a conda environment that includes  numpy, pyyaml, six, pillow=2.7, cffi .  Example:  conda create -n gelutils six numpy pillow=2.7 pyyaml cffi    Then install gelutils using  pip install gelutils .",
            "title": "Command-line installation using pip:"
        },
        {
            "location": "/Installation/#install-gelutils-in-editable-mode",
            "text": "Activate/create environment for gelutils.  Go to the folder where you want to place the gelutils package source.  Install gelutils using  pip install -e git+ https://github.com/scholer/gelutils",
            "title": "Install gelutils in editable mode:"
        },
        {
            "location": "/Installation/#manual-installation-from-source",
            "text": "Download / git clone, go to the root directory. If you type  ls  (or  dir  on Windows) you should see  README.md  and REQUIREMENTS.txt files.  If you are using Python environments, activate the environment you want to use for gelutils.  To create new conda environment for gelutils, type:  conda create -n gelutils --file REQUIREMENTS.txt  If the packages are not all available from Anaconda, type: conda create -n gelutils six numpy pillow=2.7 pyyaml cffi ,\nand use pip to install the rest.    Make sure you have all required dependencies, e.g. using  pip install -r REQUIREMENTS.txt .  Install using  pip install -e .  (the period at the end means  the current directory ).",
            "title": "Manual installation from source:"
        },
        {
            "location": "/Installation/#upgrading-gelutils",
            "text": "To update gelutils to the newest version, activate the python environment where you installed gelutils (if any),\nthen run:   pip install -U gelutils",
            "title": "Upgrading Gelutils:"
        },
        {
            "location": "/Installation/#python-installation",
            "text": "In general, I recommend using either Anaconda or a package manager to install Python and pip.\nAnaconda is available from  here .\nIf you are already using a package manager (e.g.  chocolatey  on Windows),\nyou may want to use your package manager to install Python.  Inside your Python distribution you may want to have separate Python  environments . Why do you need  environments ? \n *  A: Some Python applications may require a very specific set of dependencies, which can sometimes be incompatible.\n    For example, Gelutils requires a specific version of Pillow, an image processing library.\n    Using the current version of Pillow, or a very old version, will give an error.\n    However, what if you have another Python package or application which requires the newest version of Pillow?\n    How do you make these work together, using the same Python installation?\n    The answer is to have separate Python environments, one for each application.  Environments can be created and managed in a couple of different ways:\n * If you are using the Anaconda Python distribution, use  conda  command line tool\n   to create environments and install packages (using  pip  when a conda package is not yet available).",
            "title": "Python Installation:"
        },
        {
            "location": "/Installation/#installation-troubleshooting",
            "text": "Generally, one cause of troubles during installation is the Cairo dependencies.\nCairo is used to convert SVG files to PNG, but is not strictly needed if you only need the SVG files.\nIt is also possible to use other methods to convert SVG files to PNG, e.g. ImageMagick, Illustrator, Preview, etc.\nIf you find that you cannot resolve Cairo-related issues during installation, you can install Gelutils without it using pip install --no-deps gelutils svgwrite pyyaml six Pillow==2.7 numpy , then  The cairocffi dependency uses the C Foreign Function Interface (c ffi) to interact with Cairo C code.\nIn order to compile cairocffi, you must have  libffi-dev  installed.\n* On Linux:  sudo apt-get install libffi-dev  (sometimes called  libffi-devel )  If you get a  compiler  error, make sure you have a compiler installed.  On Linux/Ubuntu, install with  sudo apt-get install gcc .  On OS X, simply typing gcc should allow you to install the Mac developer tools.\n* On Windows, hopefully pip can find a binary wheel for you because building on Windows is still a PITA.\n    * The  cffi  library is generally available as a binary wheel for Anaconda.\n    If  cffi  install is your problem and you are using Anaconda, try installing  cffi  using:  conda install cffi .",
            "title": "Installation - Troubleshooting:"
        },
        {
            "location": "/Tutorial-GUI/",
            "text": "",
            "title": "Tutorial - GUI"
        },
        {
            "location": "/Tutorial-Console/",
            "text": "",
            "title": "Tutorial - Command line"
        },
        {
            "location": "/GelAnnotator_GUI_help/",
            "text": "TYPICAL USAGE AND SETUP\n\n\nThe easiest way to invoke the Gel Annotator GUI is to create a shortcut\non your desktop to one of the shell scripts in the bin/ folder,\nand then drag your gel files onto this shortcut.\n\n\nFor windows you should use the .bat file in bin/, while\non OS X and Linux you use the file ending with \n.sh\n.\n\n\nGel files can be either GEL/TIF files, or PNG/JPG.\nThe software will linearize GEL files by default.\n\n\nYou write the lanes in the text input area to the left.\n\n\nThe text area to the right shows a long list of options.\n\n\nBut, before we go through these, it might be informative to go through\nthe program\ns workflow:\n\n\n\n\n\n\nFirst, if you have a GEL or TIF file, or if you have asked\n    the program to perform transformations (crop, rotate, scale, etc),\n    then the program will create a PNG file that it can use for annotation.\n    (If you are starting from a PNG file, this is simply used as-is.)\n\n\n\n\n\n\nSecond, the program create a SVG file with the PNG file and the\n    annotations from the left text area.\n\n\n\n\n\n\nThird, the program can use the SVG file to create a\n    PNG image with annotations.\n\n\n\n\n\n\nThe third step is optional; the generated SVG file with annotations\nis perfectly fine for most purposes, except the file size is a little large.\n\n\nPROGRAM OPTIONS\n\n\nImage related options:\n\n\n* crop: \nleft\n, \ntop\n, \nright\n, \nbottom\n to crop the gel.\n    if you set cropfromedges to true, right and bottom are from the edge,\n    otherwise they are absolute coordinates.\n* rotate: \nangle\n will rotate the gel.\n    if you set rotateexpands to true, the image is expanded to accomodate\n    the full image after rotation.\n* dynamicrange: \nmin\n, \nmax\n will set the minimum and maximum values\n    of the dynamic range. Also known as adjusting the contrast ;-)\n\n* invert: If you set invert to true, the image is inverted. This is the default for GEL files.\n* linearize: perform linearization of GEL data. This is also default for GEL files.\n\n\n\nText annotation options:\n\n\n* fontfamily, fontsize, fontweight: used to change the font (duh)\n\n* textrotation: \nangle\n controls the angle of the lane annotations.\n\n* textfmt: can be used to format the lane annotation string.\n    Default is \"{name}\", which just adds the annotation.\n    Changing this to e.g. \"{idx:02} - {name}\" would add the lane\n    number to the annotation: \"01 - 10 bp marker\".\n    You can use laneidxstart to change the idx start number (default: 0)\n\n* yoffset and ypadding are used to control the vertical position of the\n    lane annotations: Increasing yoffset will add more whitespace above the\n    gel, making more room for the annotations. ypadding controls the\n    vertical space between the top of the gel and the annotations.\n\n* xmargin, xspacing, extraspaceright are used to control the horizontal\n    position of the annotations.\n* xmargin: \nleft\n, \nright\n controls the horizontal position of the first\n    and last annotation.\n* extraspacingright can be used to add a bit of extra space to the right,\n    to avoid the rightmost annotations to be cropped.\n* xspacing can be used to manually override the horizontal distance\n    between annotations.\n\n\n\nFiles and workflow options:\n\n\n* openwebbrowser : open the generated files when complete.\n\n* pngfile : use this png file for annotations (instead of the GEL file).\n\n* reusepng : if set to true, the program re-uses the previously generated PNG file\n    if available, thus skipping the (somewhat slow) conversion of GEL data.\n\n* svgtopng : convert the annotated SVG file as PNG image.\n\n* annotationsfile : the file to read and write annotations to/from.\n\n* yamlfile : the file to read and write yaml settings to.\n\n\n\nDEPENDENCIES:\n\n\nTo run the program, you need Python. Python is very widely used and may already be\npresent on your system. (Open a terminal and type \npython\n to check.)\n\n\n* GelUtils have been developed for python 2.7\n* It might work on python 3+, but it is a pain to ensure that it runs on both python 2 and 3.\n\n\n\nIf it is not present, use your package manager to install it.\nIf you are on Windows, you can either download the default python distribution\nor one of the \nfully featured\n distributions:\n    * \npython.org/download\n       - The \nofficial\n distribution.\n    * \ncontinuum.io/downloads\n    - Anaconda, my favorite distribution.\n    * \nenthought.com/downloads\n   - Enthought Canopy, another good distribution.\n    * \nwinpython.sourceforge.net\n - WinPython is another, slightly older distribution.\n\n\nThe primary dependencies are:\n    * yaml (pyyaml)\n    * Python Image Library, PIL - or Pillow.\n    * numpy  (to linearize GEL data)\n    * svgwrite (to create svg file with annotations)\n    * cairo, cairosvg and cairocffi  \n or alternatively just imagemagick  (to generate the last, annotated PNG image)\n    * six (for python 2 \n 3 compatability)\n\n\nYou should be able to generate most of these through your distribution\ns package manager.\nIf it is not available through the package manager, use pip:\n    \n pip search \n        - to search for packages.\n    \n pip install \n       - to install a package.\n\n\nFor generating the last PNG image with annotations, the best results are produced\nwith cairosvg+cairocffi, and the Cairo toolkit.\nHowever, these can be a bit tricky to install, especially on windows.\n\n\nHere are some useful links to get Cairo installed on Windows:\n\n \nhttp://gtk-win.sourceforge.net/home/index.php/Main/Downloads\n\n\n \nhttps://pythonhosted.org/cairocffi/overview.html\n\n\nSteps:\n\n\nDownload and install Alexander Shaduri\ufffds GTK+ installer from above. (Make sure to let the installer set PATH variable.)\n\n\npip install cairocffi cairosvg\n\n\nIf you get \nOSError: cannot load library libcairo.so.2: error 0x7e\n:\n\n\nTried to install with compatability DLLs, tried to install in folder without spaces (C:\\runtimes),\n\n\ntried to install in lib\\ dir rather than bin\\, nothing helps...\nIt could be an issue with compiler (VS 2007 vs 2010, for python 2 vs 3)\n\n\n\nTry to edit all cairocffi_\n_init__.py\n so it only has the .dll name.\n\n\nOSError: cannot load library C:\\runtimes\\GTK2-Runtime\\lib\\libcairo-2.dll: error 0xc1\n\n\nInstall pycairo from \nhttp://www.lfd.uci.edu/~gohlke/pythonlibs/#pycairo\n ?\n\n\nOr tutorial: \nhttp://digitalpbk.blogspot.com.au/2012/03/installing-pygtk-pypango-and-pycairo-on.html\n\n\nDownload from \nhttp://www.gtk.org/download/win64.php\n  \n downloading the \nall-in-one\n zip did the job,\n\n\nhttp://win32builder.gnome.org/gtk+-bundle_3.6.4-20131201_win64.zip\n - extract and add the \\bin\\ folder to your path.\n\n\nIf you already have ImageMagick installed you might want to just use this.\n(ImageMagick  is one of the best and ubiquitous tools for converting and\ntransforming images - highly recommended.)",
            "title": "GUI User Guide"
        },
        {
            "location": "/GelAnnotator_GUI_help/#typical-usage-and-setup",
            "text": "The easiest way to invoke the Gel Annotator GUI is to create a shortcut\non your desktop to one of the shell scripts in the bin/ folder,\nand then drag your gel files onto this shortcut.  For windows you should use the .bat file in bin/, while\non OS X and Linux you use the file ending with  .sh .  Gel files can be either GEL/TIF files, or PNG/JPG.\nThe software will linearize GEL files by default.  You write the lanes in the text input area to the left.  The text area to the right shows a long list of options.  But, before we go through these, it might be informative to go through\nthe program s workflow:    First, if you have a GEL or TIF file, or if you have asked\n    the program to perform transformations (crop, rotate, scale, etc),\n    then the program will create a PNG file that it can use for annotation.\n    (If you are starting from a PNG file, this is simply used as-is.)    Second, the program create a SVG file with the PNG file and the\n    annotations from the left text area.    Third, the program can use the SVG file to create a\n    PNG image with annotations.    The third step is optional; the generated SVG file with annotations\nis perfectly fine for most purposes, except the file size is a little large.",
            "title": "TYPICAL USAGE AND SETUP"
        },
        {
            "location": "/GelAnnotator_GUI_help/#program-options",
            "text": "Image related options:  * crop:  left ,  top ,  right ,  bottom  to crop the gel.\n    if you set cropfromedges to true, right and bottom are from the edge,\n    otherwise they are absolute coordinates.\n* rotate:  angle  will rotate the gel.\n    if you set rotateexpands to true, the image is expanded to accomodate\n    the full image after rotation.\n* dynamicrange:  min ,  max  will set the minimum and maximum values\n    of the dynamic range. Also known as adjusting the contrast ;-)\n\n* invert: If you set invert to true, the image is inverted. This is the default for GEL files.\n* linearize: perform linearization of GEL data. This is also default for GEL files.  Text annotation options:  * fontfamily, fontsize, fontweight: used to change the font (duh)\n\n* textrotation:  angle  controls the angle of the lane annotations.\n\n* textfmt: can be used to format the lane annotation string.\n    Default is \"{name}\", which just adds the annotation.\n    Changing this to e.g. \"{idx:02} - {name}\" would add the lane\n    number to the annotation: \"01 - 10 bp marker\".\n    You can use laneidxstart to change the idx start number (default: 0)\n\n* yoffset and ypadding are used to control the vertical position of the\n    lane annotations: Increasing yoffset will add more whitespace above the\n    gel, making more room for the annotations. ypadding controls the\n    vertical space between the top of the gel and the annotations.\n\n* xmargin, xspacing, extraspaceright are used to control the horizontal\n    position of the annotations.\n* xmargin:  left ,  right  controls the horizontal position of the first\n    and last annotation.\n* extraspacingright can be used to add a bit of extra space to the right,\n    to avoid the rightmost annotations to be cropped.\n* xspacing can be used to manually override the horizontal distance\n    between annotations.  Files and workflow options:  * openwebbrowser : open the generated files when complete.\n\n* pngfile : use this png file for annotations (instead of the GEL file).\n\n* reusepng : if set to true, the program re-uses the previously generated PNG file\n    if available, thus skipping the (somewhat slow) conversion of GEL data.\n\n* svgtopng : convert the annotated SVG file as PNG image.\n\n* annotationsfile : the file to read and write annotations to/from.\n\n* yamlfile : the file to read and write yaml settings to.",
            "title": "PROGRAM OPTIONS"
        },
        {
            "location": "/GelAnnotator_GUI_help/#dependencies",
            "text": "To run the program, you need Python. Python is very widely used and may already be\npresent on your system. (Open a terminal and type  python  to check.)  * GelUtils have been developed for python 2.7\n* It might work on python 3+, but it is a pain to ensure that it runs on both python 2 and 3.  If it is not present, use your package manager to install it.\nIf you are on Windows, you can either download the default python distribution\nor one of the  fully featured  distributions:\n    *  python.org/download        - The  official  distribution.\n    *  continuum.io/downloads     - Anaconda, my favorite distribution.\n    *  enthought.com/downloads    - Enthought Canopy, another good distribution.\n    *  winpython.sourceforge.net  - WinPython is another, slightly older distribution.  The primary dependencies are:\n    * yaml (pyyaml)\n    * Python Image Library, PIL - or Pillow.\n    * numpy  (to linearize GEL data)\n    * svgwrite (to create svg file with annotations)\n    * cairo, cairosvg and cairocffi    or alternatively just imagemagick  (to generate the last, annotated PNG image)\n    * six (for python 2   3 compatability)  You should be able to generate most of these through your distribution s package manager.\nIf it is not available through the package manager, use pip:\n      pip search          - to search for packages.\n      pip install         - to install a package.  For generating the last PNG image with annotations, the best results are produced\nwith cairosvg+cairocffi, and the Cairo toolkit.\nHowever, these can be a bit tricky to install, especially on windows.  Here are some useful links to get Cairo installed on Windows:   http://gtk-win.sourceforge.net/home/index.php/Main/Downloads    https://pythonhosted.org/cairocffi/overview.html  Steps:",
            "title": "DEPENDENCIES:"
        },
        {
            "location": "/GelAnnotator_GUI_help/#download-and-install-alexander-shaduris-gtk-installer-from-above-make-sure-to-let-the-installer-set-path-variable",
            "text": "",
            "title": "Download and install Alexander Shaduri\ufffds GTK+ installer from above. (Make sure to let the installer set PATH variable.)"
        },
        {
            "location": "/GelAnnotator_GUI_help/#pip-install-cairocffi-cairosvg",
            "text": "If you get  OSError: cannot load library libcairo.so.2: error 0x7e :",
            "title": "pip install cairocffi cairosvg"
        },
        {
            "location": "/GelAnnotator_GUI_help/#tried-to-install-with-compatability-dlls-tried-to-install-in-folder-without-spaces-cruntimes41",
            "text": "tried to install in lib\\ dir rather than bin\\, nothing helps...\nIt could be an issue with compiler (VS 2007 vs 2010, for python 2 vs 3)",
            "title": "Tried to install with compatability DLLs, tried to install in folder without spaces (C:\\runtimes),"
        },
        {
            "location": "/GelAnnotator_GUI_help/#try-to-edit-all-cairocffi95_init__py-so-it-only-has-the-dll-name",
            "text": "",
            "title": "Try to edit all cairocffi__init__.py so it only has the .dll name."
        },
        {
            "location": "/GelAnnotator_GUI_help/#oserror-cannot-load-library-cruntimesgtk2-runtimeliblibcairo-2dll-error-0xc1",
            "text": "",
            "title": "OSError: cannot load library C:\\runtimes\\GTK2-Runtime\\lib\\libcairo-2.dll: error 0xc1"
        },
        {
            "location": "/GelAnnotator_GUI_help/#install-pycairo-from-httpwwwlfduciedugohlkepythonlibspycairo",
            "text": "",
            "title": "Install pycairo from http://www.lfd.uci.edu/~gohlke/pythonlibs/#pycairo ?"
        },
        {
            "location": "/GelAnnotator_GUI_help/#or-tutorial-httpdigitalpbkblogspotcomau201203installing-pygtk-pypango-and-pycairo-onhtml",
            "text": "",
            "title": "Or tutorial: http://digitalpbk.blogspot.com.au/2012/03/installing-pygtk-pypango-and-pycairo-on.html"
        },
        {
            "location": "/GelAnnotator_GUI_help/#download-from-httpwwwgtkorgdownloadwin64php-downloading-the-all-in-one-zip-did-the-job",
            "text": "",
            "title": "Download from http://www.gtk.org/download/win64.php  -- downloading the \"all-in-one\" zip did the job,"
        },
        {
            "location": "/GelAnnotator_GUI_help/#httpwin32buildergnomeorggtk-bundle_364-20131201_win64zip-extract-and-add-the-bin-folder-to-your-path",
            "text": "If you already have ImageMagick installed you might want to just use this.\n(ImageMagick  is one of the best and ubiquitous tools for converting and\ntransforming images - highly recommended.)",
            "title": "http://win32builder.gnome.org/gtk+-bundle_3.6.4-20131201_win64.zip - extract and add the \\bin\\ folder to your path."
        },
        {
            "location": "/Config-Ref/",
            "text": "Keyword\n  \nType and default\n  \nHelp\n\n\n  \ngelfile\n \ngelfile\n \nIf file is a YAML file, you can specify gelfile explicitly with --gelfile. \n  \n\n\n  \nloglevel\n \nloglevel\n \nLogging level, e.g. 10, 30, or 'DEBUG', 'INFO. \n  \n\n\n  \nlogtofile\n \nlogtofile\n \nWrite log output to file rather than console. \n  \n\n\n  \nstdout\n \nstdout\n \nWrite stdout stream to file rather than console. \n  \n\n\n  \nstderr\n \nstderr\n \nWrite stderr stream to file rather than console. Defaults to same value as stdout. \n  \n\n\n  \nstdout_mode\n \nstdout_mode\n \nFile open mode for stdout stream, if stdout is given. Default: 'w'. (default: w)\n  \n\n\n  \nstderr_mode\n \nstderr_mode\n \nFile open mode for stderr stream, if stderr is given. Default: 'w'. (default: w)\n  \n\n\n  \ndisable_logging\n \ntrue/false\n \nDisable logging system. \n  \n\n\n  \nlinearize\n \ntrue/false\n \nLinearize gel (if e.g. typhoon). \n  \n\n\n  \ndynamicrange\n \nMIN, MAX\n \nSpecify dynamic range (contrast). Valid argumets are 'MIN MAX', 'MAX' and 'auto', e.g. '1000, 20000' to set range from 1000 to 20000, '20000' to set range from zero to 20000, and 'auto' to determine range automatically. MIN and MAX are usually provided as absolute values e.g. '300 5000', but can also be specified as percentage values, e.g. '0.1% 99%'. If percentage or decimal values are given, the dynamic range is set such that MIN % of the pixels are below the lower range and (1.0 - MAX) of the pixels are above the dynamic range. If only one integer argument is given if is assumed to be the max, and min is set to 0. If specifying 'auto', the software will try to determine a suitable contrast range automatically. \n  \n\n\n  \ngelfile_remember\n \ntrue/false\n \nSave gelfile in config for later use. \n  \n\n\n  \ninvert\n \ntrue/false\n \nInvert gel data, so zero is white, high intensity black. \n  \n\n\n  \nconvertgelto\n \npng/jpg/etc\n \nConvert gel to this format. (default: png)\n  \n\n\n  \noverwrite\n \ntrue/false\n \n\"Overwrite existing png file. If set to false, the program will re-use the any old PNG it finds instead of re-generating the PNG from the .GEL file. If you are playing around with e.g. the annotations, this can save a bit of computation. (default: True)\n  \n\n\n  \npngfnfmt\n \nformat_string\n \nCustomize the png filename using python string formatting. (default: {yamlfnroot}_{dr_rng}{N_existing}{ext})\n  \n\n\n  \npngmode\n \npngmode\n \nPNG output format (bits per pixel). L = 8 bit integer, I = 16/32 bit. (default: L)\n  \n\n\n  \nfilename_sub\n \nFIND, REPLACE\n \nSubstitute FIND with REPLACE in output filename. \n  \n\n\n  \nfilename_sub_re\n \nFIND, REPLACE\n \nSubstitute all substrings matching the regex FIND with REPLACE in output filename. \n  \n\n\n  \ncrop\n \nLEFT, UPPER, RIGHT, LOWER\n \nCrop image to this box (left upper right lower) aka (x1 y1 x2 y2), Values can be either pixel values [500, 100, 1200, 400], or fractional/percentage values [5%, 3%, 95%, 0.9]. Note: Yes, 0.9 is 90%. If gel image is 1000 pixels wide, 0.9 or 90% are equivalent to 900 pixels. OBS! Note that by default the values are interpreted as \nstrong\nABSOLUTE COORDINATE VALUES\n/strong\n from the top, left pixel. If you want to change this behaviour such that the RIGHT and LOWER values are interpreted as the amount to crop away, e.g. 'crop 12% from the right edge', set ```cropfromedges``` to true. \n  \n\n\n  \ncropfromedges\n \ntrue/false\n \nIf true, the crop values RIGHT and LOWER defined above specifies pixels from their respective edges instead of absolute coordinates from the upper left corner. Default: false. \n  \n\n\n  \nscale\n \nscalefactor\n \n\"Scale the gel by this amount. Can be a single value for uniform scaling, or two values for different scaling in x vs y. Can be given as float (0.1, 2.5) or percentage (10%, 250%). \n  \n\n\n  \nrotate\n \nangle\n \nRotate gel image by this angle (counter-clockwise). Default: 0. \n  \n\n\n  \nrotateexpands\n \ntrue/false\n \nWhen rotating, the image size expands to make room. False (default) means that the gel will keep its original size. \n  \n\n\n  \nflip_h\n \ntrue/false\n \nFlip image horizontally left-to-right. \n  \n\n\n  \nflip_v\n \ntrue/false\n \nFlip image vertically top-to-bottom. \n  \n\n\n  \nsvgfnfmt\n \nformat_string\n \nHow to format the png filename (if created). (default: {pngfnroot}_annotated{ext})\n  \n\n\n  \npngfile\n \nfilename\n \nUse this pngfile instead of the specified gelfile. \n  \n\n\n  \nreusepng\n \ntrue/false\n \nPrefer png file over the specified gelfile. \n  \n\n\n  \nyoffset\n \nint-or-fraction\n \nY offset (how far down the gel image should be). \n  \n\n\n  \nypadding\n \nint-or-fraction\n \nVertical space between gel image and annotations. \n  \n\n\n  \nxmargin\n \nleft, right\n \nMargin to the right and left of lane annotations to the outer edge of GEL image. \n  \n\n\n  \nxspacing\n \nint-or-fraction\n \nForce a certain x spacing between lanes. \n  \n\n\n  \nxtraspaceright\n \nint-or-fraction\n \nAdd additional padding/whitespace to the right side of the gel image. This is sometimes needed if the gel is not wide enough for the last lane annotation. \n  \n\n\n  \ntextrotation\n \nangle\n \nRotate lane annotations by this angle (counter-clockwise). Default: 70. \n  \n\n\n  \nfontsize\n \nSIZE (int)\n \nSpecify default font size, e.g. 12 or 16. \n  \n\n\n  \nfontfamily\n \nfontfamily\n \nSpecify default font family, e.g. arial or MyriadPro. \n  \n\n\n  \nfontweight\n \nfontweight\n \nFont weight: normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | inherit. \n  \n\n\n  \ntextfmt\n \nformat_string\n \nHow to format the lane annotations, e.g. '{idx} {name}'. Format keys include: idx, name. Default: '{name}'. \n  \n\n\n  \nlaneidxstart\n \nint\n \nChange the start number of the {idx} format parameter of lane annotations. \n  \n\n\n  \nyamlfile\n \nfilename\n \nLoad options from YAML file, update and save. \n  \n\n\n  \nsaveyamlto\n \nfilename\n \nForce saving yaml to this file when complete. \n  \n\n\n  \nupdateyaml\n \ntrue/false\n \nUpdate yaml settings after run to reflect the settings used. (default: False)\n  \n\n\n  \nembed\n \ntrue/false\n \nEmbed image data in svg file. (default) (default: True)\n  \n\n\n  \nannotationsfile\n \nfilename\n \nLoad lane annotations from this file. If not specified, will try to guess the right file. \n  \n\n\n  \nlines_inputstyle\n \nstring-spec\n \nThis can be used to change how lines in the sample annotation file are interpreted. Default is to use all non-empty lines that does not begin with '#'. Set this to 'wikilist' to only include lines that starts with either of #, *, -, +. \n  \n\n\n  \nlines_includeempty\n \ntrue/false\n \nWhether to include empty lines. Not applicable to 'wikilist' lines_inputstyle (use blank lines starting with '#' in this case). (default: False)\n  \n\n\n  \nlines_listchar\n \nstring-spec\n \nIf annotations are copy-pasted from a wiki/markdown list and you want to strip the list charaacter (e.g. '*' or '#'), specify the character here. Default: auto-detect. \n  \n\n\n  \nlines_commentchar\n \nstring-spec\n \nLines starting with this character are ignored (comments). Default: auto-detect. \n  \n\n\n  \nopenwebbrowser\n \ntrue/false\n \nOpen annotated svg file in default webbrowser. Default: Do not open files. (default: True)\n  \n\n\n  \nsvgtopng\n \ntrue/false\n \nSave svg as png (requires cairo package).",
            "title": "Configuration Reference"
        },
        {
            "location": "/Config-Examples/",
            "text": "Config example (with comments)\n\n\n\nconvertgelto: png        # Convert Gel image to PNG format\ncrop: 55%, 2%, 10%, 5%   # Crop 55% from the left side, 10% from the left, etc.\ncropfromedges: true      # true, so  cropping from the right edge, not absolute coordinates.\ndynamicrange: 100, 20000 # Pixels with value \n 100 are white, pixels \n 20000 are black, graytones in between.\nembed: true              # Embed image data into the SVG file (rather than link to a file).\nfn_substitution:         # Substitute \n-[SYBR Gold]\n with nothing when generating new file names.\n- -[SYBR Gold]\n- ''\nflip_h: true            # Flip/mirror the gel horizontally\nflip_v: true            # Flip the gel \nfontfamily: Arial       # Use Arial font for lane annotations.\nfontsize: 15            # Set lane annotations font size to 15 pt.\nfontweight: bold        # Make lane annotations bold.\ngelfile: null           # Set to null to find gelfile automatically.\ninvert: true            # Invert gel image so bands appear black on white background.\nlaneidxstart: 3         # Start lane indexing at 3, rather than 1.\nlinearize: null         # Linearize gel data when creating PNG. (Default for .GEL files but not tiff.)\nlineinputstyle: wikilist # My annotation lines begins with \n*\n because they were copy/pasted from a wiki list.\nlines_includeempty: true # Include empty lines\nopenwebbrowser: true    # Open annotated files in webbrowser (or whatever is your application for SVG files)\noverwrite: true         # Overwrite old files without warning.\npngfile: null           # Determine automatically.\npngfnfmt: '{yamlfnroot}_{dr_rng}{N_existing}{ext}'   # Name PNG file like this. Curly brackets are replaced with values.\npngmode: L              # Use 8-bit PNG mode.\nremember_gelfile: null\nreusepng: null\nrotate: -6              # Rotate the gel image minus 6 degree counter-clockwise (= 6 degrees clockwise).\nrotateexpands: false    # Do not make the gel file larger to accomodate the rotation.\nsaveyamlto: null\nscale: 50%              # Scale the gel image to 50 % of its original size.\nsvgfnfmt: '{pngfnroot}_annotated{ext}'  # The SVG file is named based on pngfnfmt (above) plus \n_annotated.svg\n.\nsvgtopng: true          # Convert the annotated SVG file to PNG. \ntextfmt: \nlane {idx}: {name}\n # Each lane annotation from the left panel is prefixed by \nlane 3:\n (for the rightmost lane)\ntextrotation: 60        # Rotate lane annotations by 60 degrees from horizontal.\nupdateyaml: null\nverbose: null\nxmargin: 5%, 10%        # Add a 5% margin from the left-most lane to the left edge of the gel, and 10% on the right side.\nxspacing: null\nxtraspaceright: 50      # Add 50 extra pixels to the right to make a little more room for the annotation for the right-most lane.\nyoffset: 200            # Add vertical space from the top of the SVG canvas to the top of the gel image.\nypadding: 10            # Add 10 pixel vertical space between gel image and lane annotations.",
            "title": "Configuration Examples"
        },
        {
            "location": "/Config-Examples/#config-example-with-comments",
            "text": "convertgelto: png        # Convert Gel image to PNG format\ncrop: 55%, 2%, 10%, 5%   # Crop 55% from the left side, 10% from the left, etc.\ncropfromedges: true      # true, so  cropping from the right edge, not absolute coordinates.\ndynamicrange: 100, 20000 # Pixels with value   100 are white, pixels   20000 are black, graytones in between.\nembed: true              # Embed image data into the SVG file (rather than link to a file).\nfn_substitution:         # Substitute  -[SYBR Gold]  with nothing when generating new file names.\n- -[SYBR Gold]\n- ''\nflip_h: true            # Flip/mirror the gel horizontally\nflip_v: true            # Flip the gel \nfontfamily: Arial       # Use Arial font for lane annotations.\nfontsize: 15            # Set lane annotations font size to 15 pt.\nfontweight: bold        # Make lane annotations bold.\ngelfile: null           # Set to null to find gelfile automatically.\ninvert: true            # Invert gel image so bands appear black on white background.\nlaneidxstart: 3         # Start lane indexing at 3, rather than 1.\nlinearize: null         # Linearize gel data when creating PNG. (Default for .GEL files but not tiff.)\nlineinputstyle: wikilist # My annotation lines begins with  *  because they were copy/pasted from a wiki list.\nlines_includeempty: true # Include empty lines\nopenwebbrowser: true    # Open annotated files in webbrowser (or whatever is your application for SVG files)\noverwrite: true         # Overwrite old files without warning.\npngfile: null           # Determine automatically.\npngfnfmt: '{yamlfnroot}_{dr_rng}{N_existing}{ext}'   # Name PNG file like this. Curly brackets are replaced with values.\npngmode: L              # Use 8-bit PNG mode.\nremember_gelfile: null\nreusepng: null\nrotate: -6              # Rotate the gel image minus 6 degree counter-clockwise (= 6 degrees clockwise).\nrotateexpands: false    # Do not make the gel file larger to accomodate the rotation.\nsaveyamlto: null\nscale: 50%              # Scale the gel image to 50 % of its original size.\nsvgfnfmt: '{pngfnroot}_annotated{ext}'  # The SVG file is named based on pngfnfmt (above) plus  _annotated.svg .\nsvgtopng: true          # Convert the annotated SVG file to PNG. \ntextfmt:  lane {idx}: {name}  # Each lane annotation from the left panel is prefixed by  lane 3:  (for the rightmost lane)\ntextrotation: 60        # Rotate lane annotations by 60 degrees from horizontal.\nupdateyaml: null\nverbose: null\nxmargin: 5%, 10%        # Add a 5% margin from the left-most lane to the left edge of the gel, and 10% on the right side.\nxspacing: null\nxtraspaceright: 50      # Add 50 extra pixels to the right to make a little more room for the annotation for the right-most lane.\nyoffset: 200            # Add vertical space from the top of the SVG canvas to the top of the gel image.\nypadding: 10            # Add 10 pixel vertical space between gel image and lane annotations.",
            "title": "Config example (with comments)"
        },
        {
            "location": "/about/",
            "text": "Gelutils - Tools for converting and annotating scientific gel files. From command line or through graphical user interface.\n\n\nCopyright 2016 Rasmus S. Sorensen, rasmusscholer@gmail.com\n\n\nSource repository and issue tracker at Github: \nhttps://github.com/scholer/gelutils\n\n\nProject website: \nhttps://scholer.github.com/gelutils",
            "title": "About"
        },
        {
            "location": "/Development_Notes/",
            "text": "General development notes:\n\n\nCode and issue-tracking at github: \nhttps://github.com/scholer/gelutils\n\n\nExtra python requirements for development:\n\n\n\n\nmkdocs\n for docs generation and deployment.\n   MkDocs further requires \nMarkdown\n, \nJinja\n, \nTornado\n, \nClick\n, \nLivereload\n, and \nMarkupSafe\n.\n\n\nmdx_linkify\n to auto-recognize links in Markdown files, using \nextensions=[\"linkify\"]\n.\n   Requires \nhtml5lib\n, and \nbleach\n.\n\n\npandoc\n to convert \nREADME.md\n to README.rst during PyPI deployment.\n\n\npytest\n for testing.\n\n\n\n\nPackages available from Anaconda (if you use conda for your package management,\ninstall these with \nconda install\n before installing other packages with \npip\n):\n\n\nconda install jinja2 tornado click markupsafe pandoc pytest numpy\n\n\n\n\nSetting up for Gelutils development (see also \nREADME.md\n):\n\n\n\n\n(Optional): Make a dedicated python environment for gelutils, e.g.: \nconda create -n\n\n\ncd to your dev folder and download repo: \ngit clone \nhttps://github.com/scholer/gelutils.git\n\n\nInstall gelutils into your python environment in editable mode: \ncd gelutils\n, then \npip install -e .\n\n\nAlternatively, you can combine steps 1+2 into one: \npip install -e git+\nhttps://github.com/scholer/gelutils\n\n\nMake sure all dev requirements are installed: \npip install -r requirements_dev.txt\n\n\n\n\nRELEASE process:\n\n\nRelease process:\n\n\n\n\nMake sure all tests passes,\n\n\nBump version number (version+download_url in \nsetup.py\n and version in gelutils/\ninit\n.py)\n\n\nChange to separate python build environment (e.g. \ngelutils-release-testing\n - This is NOT\n   the same as your \ngelutils\n development environment),\n   build release with \npython \nsetup.py\n sdist\n,\n   install build in separate python environment using \npip install dist/gelutils-\nversion\n-.tar.gz\n, \n   and run tests.\n\n\nRegister release and upload source distribution to PyPI test site:\n   \npython \nsetup.py\n register -r pypitest\n, then \npython \nsetup.py\n sdist upload -r pypitest\n,\n   then check \nhttps://testpypi.python.org/pypi/gelutils/\n and make sure it looks right.\n\n\nRegister release and upload production PyPI site and check \nhttps://pypi.python.org/pypi/gelutils/\n\n   \npython \nsetup.py\n register -r pypi\n, then \npython \nsetup.py\n sdist upload -r pypi\n\n\nTag this version with \ngit tag 1.2.3 -m \"message\"\n, then push it with\n   \ngit push --follow-tags\n (or \ngit push --tags\n if you have already pushed the branch/commits)\n\n\n\n\nsetup.py\n example files and guides:\n\n\n\n\nhttps://github.com/pypa/sampleproject/blob/master/setup.py\n\n\nhttps://hynek.me/articles/sharing-your-labor-of-love-pypi-quick-and-dirty/\n\n\n\n\nDocs generation \n hosting/deployment:\n\n\nCurrently using \nMkDocs\n for doc generation and \nGitHub Pages\n for hosting, c.f. \nwww.mkdocs.org/user-guide/deploying-your-docs/\n\n\nTo see the current docs locally at \n127.0.0.1:8000/\n:\n\n\n$ cd \nmain project directory\n\n$ mkdocs serve\n\n\n\n\n\nDeploying to GitHub pages: (this is what I\nm currently using)\n\n\n\n\nPush docs to \ngh-pages\n branch, docs available at \nscholer.github.io/gelutils\n\n\n\n\nmkdocs gh-deploy --clean\n\n\n\n\nDeploying to pythonhosted (PyPI):\n\n\n\n\nUse setuptools in your \nsetup.py\n, docs available at \npythonhosted.org/gelutils/\n\n\n\n\nmkdocs build --clean\npython setup.py upload_docs --upload-dir=site\n\n\n\n\nDocumentation - alternatives:\n\n\nDoc generation\n\n\n\n\nSphinx\n\n\nMkDocs - Generates static docs in your project dir\n\n\n\n\nDoc hosting:\n\n\n\n\nReadthedocs - using Sphinx\n\n\nGithub project pages - using e.g. MkDocs\n\n\nPythonhosted.org\n - build docs locally and upload using PyPI/setuptools.\n\n\n\n\nSolution #1: Sphinx + ReadTheDocs\n\n\n\n\nThe \ntraditional\n approach, widely supported.\n\n\nSphinx has Markdown support (although was originally reST only).\n\n\nDocs can be auto-generated from source. Although auto-generated docs are somewhat frowned upon.\n\n\nRequires a bit more configuration than MkDocs.\n\n\n\n\nSoution #2: MkDocs + GitHub project pages (selected)\n\n\n\n\nBuild static docs with MkDocs\n\n\nPush branch to your github repository.\n\n\n\n\nDocumentation Refs:\n\n\n\n\nhttp://www.mkdocs.org/\n\n\nhttp://www.mkdocs.org/user-guide/configuration\n\n\nhttp://www.mkdocs.org/user-guide/deploying-your-docs/\n\n\nhttp://www.mkdocs.org/user-guide/writing-your-docs/\n\n\nhttp://docs.python-guide.org/en/latest/writing/documentation/\n\n\nhttps://help.github.com/articles/creating-project-pages-manually/\n\n\nhttps://python.libhunt.com/project/mkdocs/vs/sphinx\n\n\nhttps://wiki.python.org/moin/DocumentationTools\n\n\n\n\nREADME/Documentation format: Markdown or reST?\n\n\nMarkdown and reStructured Text are somewhat compatible.\n\n\nOne major difference is reST\ns pervasive use of \ndirectives\n, lines starting with two periods \n..\n.\n\n\nreST links are created using a trailing underscore \nmylink_\n. The URI can either be embedded in the text using angle brackets, or it can be defined using a directive:\n\n\nExternal hyperlink with embedded URI, like `Python \nhttp://www.python.org/\n`_.\n\nExternal hyperlinks, like Python_.\n\n.. _Python: http://www.python.org/\n\n\n\n\n\nMarkdown: Differences between GitHub and standard Markdown:\n\n\n\n\nGitHub support automatic link recognition, i.e. \nhttps://scholer.github.io/gelutils\n is a link when parsed by GitHub e.g. \nREADME.md\n, but not when parsed by standard Markdown.\n\n\nGitHub understands lists even without an empty line above them. Which I use all the time.\n\n\n\n\nUnfortunately, neither Markdown nor reStructuredText supports automatic link recognition in their default configuration.\n\n\n\n\nGitHub does support link recognition and generation, but MkDocs does not.\n\n\nlinkify\n   - Recognises links/urls using Bleach, with or without http:// scheme in url. Nice.\n\n\nurlize\n  - parsed using regexes.\n\n\nhttps://github.com/markdown-it/linkify-it\n  (JavaScript library)\n\n\n\n\nMarkdown vs re-structured text (rst) for README vs description_long in \nsetup.py\n:\n\n\n\n\nhttps://bitbucket.org/pypa/pypi/issues/148/support-markdown-for-readmes\n - PyPI feature request.\n\n\nhttp://stackoverflow.com/questions/26737222/pypi-description-markdown-doesnt-work/26737672#26737672\n - how to convert Markdown to reST for use in \nsetup.py\n using pypandoc with automatic fallback.\n\n\nhttps://gist.github.com/dupuy/1855764\n \n commonalities between md and .rst\n\n\nhttp://docutils.sourceforge.net/docs/user/rst/demo.html\n, \nhttp://docutils.sourceforge.net/docs/user/rst/demo.txt\n \n reST demo\n\n\n\n\nreStructured Text refs:\n\n\n\n\nhttp://www.sphinx-doc.org/en/stable/rest.html\n\n\nhttp://docutils.sourceforge.net/docs/user/rst/quickref.html\n\n\n\n\nAbout configuring \nsetup.py\n\n\nGeneral refs:\n\n\n\n\nhttps://docs.python.org/3/distutils/setupscript.html\n\n\nhttp://setuptools.readthedocs.io/en/latest/setuptools.html\n\n\nhttp://www.ianbicking.org/docs/setuptools-presentation/\n\n\nhttp://matthew-brett.github.io/pydagogue/installing_scripts.html\n\n\n\n\nEntry points vs scripts keywords:\n\n\n\n\nhttp://stackoverflow.com/questions/18787036/difference-between-entry-points-console-scripts-and-scripts-in-setup-py\n\n\n\n\nRequirements:\n\n\n\n\nhttps://packaging.python.org/requirements/\n\n\n\n\nsetup.py\n examples:\n\n\n\n\nhttps://github.com/pypa/sampleproject/blob/master/setup.py\n\n\n\n\npip install:\n\n\n\n\nhttps://pip.pypa.io/en/stable/reference/pip_install/#editable-installs",
            "title": "Development"
        },
        {
            "location": "/Development_Notes/#general-development-notes",
            "text": "Code and issue-tracking at github:  https://github.com/scholer/gelutils  Extra python requirements for development:   mkdocs  for docs generation and deployment.\n   MkDocs further requires  Markdown ,  Jinja ,  Tornado ,  Click ,  Livereload , and  MarkupSafe .  mdx_linkify  to auto-recognize links in Markdown files, using  extensions=[\"linkify\"] .\n   Requires  html5lib , and  bleach .  pandoc  to convert  README.md  to README.rst during PyPI deployment.  pytest  for testing.   Packages available from Anaconda (if you use conda for your package management,\ninstall these with  conda install  before installing other packages with  pip ):  conda install jinja2 tornado click markupsafe pandoc pytest numpy  Setting up for Gelutils development (see also  README.md ):   (Optional): Make a dedicated python environment for gelutils, e.g.:  conda create -n  cd to your dev folder and download repo:  git clone  https://github.com/scholer/gelutils.git  Install gelutils into your python environment in editable mode:  cd gelutils , then  pip install -e .  Alternatively, you can combine steps 1+2 into one:  pip install -e git+ https://github.com/scholer/gelutils  Make sure all dev requirements are installed:  pip install -r requirements_dev.txt",
            "title": "General development notes:"
        },
        {
            "location": "/Development_Notes/#release-process",
            "text": "Release process:   Make sure all tests passes,  Bump version number (version+download_url in  setup.py  and version in gelutils/ init .py)  Change to separate python build environment (e.g.  gelutils-release-testing  - This is NOT\n   the same as your  gelutils  development environment),\n   build release with  python  setup.py  sdist ,\n   install build in separate python environment using  pip install dist/gelutils- version -.tar.gz , \n   and run tests.  Register release and upload source distribution to PyPI test site:\n    python  setup.py  register -r pypitest , then  python  setup.py  sdist upload -r pypitest ,\n   then check  https://testpypi.python.org/pypi/gelutils/  and make sure it looks right.  Register release and upload production PyPI site and check  https://pypi.python.org/pypi/gelutils/ \n    python  setup.py  register -r pypi , then  python  setup.py  sdist upload -r pypi  Tag this version with  git tag 1.2.3 -m \"message\" , then push it with\n    git push --follow-tags  (or  git push --tags  if you have already pushed the branch/commits)   setup.py  example files and guides:   https://github.com/pypa/sampleproject/blob/master/setup.py  https://hynek.me/articles/sharing-your-labor-of-love-pypi-quick-and-dirty/",
            "title": "RELEASE process:"
        },
        {
            "location": "/Development_Notes/#docs-generation-hostingdeployment",
            "text": "Currently using  MkDocs  for doc generation and  GitHub Pages  for hosting, c.f.  www.mkdocs.org/user-guide/deploying-your-docs/  To see the current docs locally at  127.0.0.1:8000/ :  $ cd  main project directory \n$ mkdocs serve  Deploying to GitHub pages: (this is what I m currently using)   Push docs to  gh-pages  branch, docs available at  scholer.github.io/gelutils   mkdocs gh-deploy --clean  Deploying to pythonhosted (PyPI):   Use setuptools in your  setup.py , docs available at  pythonhosted.org/gelutils/   mkdocs build --clean\npython setup.py upload_docs --upload-dir=site",
            "title": "Docs generation &amp; hosting/deployment:"
        },
        {
            "location": "/Development_Notes/#documentation-alternatives",
            "text": "Doc generation   Sphinx  MkDocs - Generates static docs in your project dir   Doc hosting:   Readthedocs - using Sphinx  Github project pages - using e.g. MkDocs  Pythonhosted.org  - build docs locally and upload using PyPI/setuptools.   Solution #1: Sphinx + ReadTheDocs   The  traditional  approach, widely supported.  Sphinx has Markdown support (although was originally reST only).  Docs can be auto-generated from source. Although auto-generated docs are somewhat frowned upon.  Requires a bit more configuration than MkDocs.   Soution #2: MkDocs + GitHub project pages (selected)   Build static docs with MkDocs  Push branch to your github repository.   Documentation Refs:   http://www.mkdocs.org/  http://www.mkdocs.org/user-guide/configuration  http://www.mkdocs.org/user-guide/deploying-your-docs/  http://www.mkdocs.org/user-guide/writing-your-docs/  http://docs.python-guide.org/en/latest/writing/documentation/  https://help.github.com/articles/creating-project-pages-manually/  https://python.libhunt.com/project/mkdocs/vs/sphinx  https://wiki.python.org/moin/DocumentationTools",
            "title": "Documentation - alternatives:"
        },
        {
            "location": "/Development_Notes/#readmedocumentation-format-markdown-or-rest",
            "text": "Markdown and reStructured Text are somewhat compatible.  One major difference is reST s pervasive use of  directives , lines starting with two periods  .. .  reST links are created using a trailing underscore  mylink_ . The URI can either be embedded in the text using angle brackets, or it can be defined using a directive:  External hyperlink with embedded URI, like `Python  http://www.python.org/ `_.\n\nExternal hyperlinks, like Python_.\n\n.. _Python: http://www.python.org/  Markdown: Differences between GitHub and standard Markdown:   GitHub support automatic link recognition, i.e.  https://scholer.github.io/gelutils  is a link when parsed by GitHub e.g.  README.md , but not when parsed by standard Markdown.  GitHub understands lists even without an empty line above them. Which I use all the time.   Unfortunately, neither Markdown nor reStructuredText supports automatic link recognition in their default configuration.   GitHub does support link recognition and generation, but MkDocs does not.  linkify    - Recognises links/urls using Bleach, with or without http:// scheme in url. Nice.  urlize   - parsed using regexes.  https://github.com/markdown-it/linkify-it   (JavaScript library)   Markdown vs re-structured text (rst) for README vs description_long in  setup.py :   https://bitbucket.org/pypa/pypi/issues/148/support-markdown-for-readmes  - PyPI feature request.  http://stackoverflow.com/questions/26737222/pypi-description-markdown-doesnt-work/26737672#26737672  - how to convert Markdown to reST for use in  setup.py  using pypandoc with automatic fallback.  https://gist.github.com/dupuy/1855764    commonalities between md and .rst  http://docutils.sourceforge.net/docs/user/rst/demo.html ,  http://docutils.sourceforge.net/docs/user/rst/demo.txt    reST demo   reStructured Text refs:   http://www.sphinx-doc.org/en/stable/rest.html  http://docutils.sourceforge.net/docs/user/rst/quickref.html",
            "title": "README/Documentation format: Markdown or reST?"
        },
        {
            "location": "/Development_Notes/#about-configuring-setuppy",
            "text": "General refs:   https://docs.python.org/3/distutils/setupscript.html  http://setuptools.readthedocs.io/en/latest/setuptools.html  http://www.ianbicking.org/docs/setuptools-presentation/  http://matthew-brett.github.io/pydagogue/installing_scripts.html   Entry points vs scripts keywords:   http://stackoverflow.com/questions/18787036/difference-between-entry-points-console-scripts-and-scripts-in-setup-py   Requirements:   https://packaging.python.org/requirements/   setup.py  examples:   https://github.com/pypa/sampleproject/blob/master/setup.py   pip install:   https://pip.pypa.io/en/stable/reference/pip_install/#editable-installs",
            "title": "About configuring setup.py"
        }
    ]
}